When would you want to use a remote repository rather than keeping all your work
local?
    When collaborating with others having a remote repostory allows them to 
    pull the repository and work on it. Similarly, with a remote repository 
    the project can be synced on multiple computers and can also function as
    backup of the project.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	It is redundant to stay up-to-date with all branches at any given moment.
	Furthermore, not all commits need to be immediately pushed on and pulled 
	from the remote repository. 

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
	Forks are clones between remote repositories. Clones are copies from a remote 
	repository to the local repository or between local repositories. Branches are
	labels for the commits in order to work on a different feature than the master
	version without influencing the master.
    
What is the benefit of having a copy of the last known state of the remote
stored locally?
	Git is able to keep track of the commits on the remote repository. This 
	has the benefit that git works offline but is still to track any changes 
	in the remote repository done in the meantime.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?
	I would try to consider other revision control tools such das SVN. Otherwise,
	one would have to send the files per mail to the collaborator. However, this
	is tedious when multiple collaborator work on the same file. Merging would have
	to be done manual that can result in malfunctioning code. 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?
	Collaboration will result in a multitude of features and version that
	probably will not all end up in the final version. This allows to always
	provide a working version in the master branch, where the other branches 
	can be used for development. On the other hand, changes directly on the 
	master would include small bugfixes or typos. However, this approach risks
	having merge conflicts on collaboration with multiple users. It is better 
	for the users to pull the master branch and then merge the master branch
	into the local branch and then create a pull request. 
